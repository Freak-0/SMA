import pandas as pd
import matplotlib.pyplot as plt
from textblob import TextBlob
import numpy as np

data = pd.read_csv("/content/data.csv")
summary = data["Summary"]
from textblob import TextBlob
def get_summary_sentiment(summary):
  analysis=TextBlob(summary)
  if analysis.sentiment.polarity>0:
    return "positive"
  elif analysis.sentiment.polarity==0:
    return "neutral"
  else:
    return "negative"

summary_list=[]
sentiment_list=[]
for summ in summary:
  sentiment=get_summary_sentiment(summ)
  summary_list.append(summ)
  sentiment_list.append(sentiment)
  print(f"{summ}.{sentiment}")

brand1_data = data.iloc[1:1044]
brand2_data = data.iloc[1045:1750]

brand1_sentiments = [TextBlob(summary).sentiment.polarity for summary in brand1_data['Summary']]
brand2_sentiments = [TextBlob(summary).sentiment.polarity for summary in brand2_data['Summary']]

brand_names = ['Brand 1', 'Brand 2']

positive_ratings = {'Brand 1': sum(1 for sentiment in brand1_sentiments if sentiment > 0), 
                    'Brand 2': sum(1 for sentiment in brand2_sentiments if sentiment > 0)}
negative_ratings = {'Brand 1': sum(1 for sentiment in brand1_sentiments if sentiment < 0), 
                    'Brand 2': sum(1 for sentiment in brand2_sentiments if sentiment < 0)}
neutral_ratings = {'Brand 1': sum(1 for sentiment in brand1_sentiments if sentiment == 0), 
                   'Brand 2': sum(1 for sentiment in brand2_sentiments if sentiment == 0)}

bar_width = 0.2
index = np.arange(len(brand_names))

plt.bar(index, positive_ratings.values(), bar_width, label='Positive', color='green')
plt.bar(index + bar_width, negative_ratings.values(), bar_width, label='Negative', color='red')
plt.bar(index + 2 * bar_width, neutral_ratings.values(), bar_width, label='Neutral', color='blue')

plt.xlabel('Brand')
plt.ylabel('Number of Ratings')
plt.title('Rating Analysis for Brands')
plt.xticks(index + bar_width, brand_names)
plt.legend()
plt.show()

brand1_ratings_counts = brand1_data['Rate'].value_counts().sort_index()
brand2_ratings_counts = brand2_data['Rate'].value_counts().sort_index()

# Function to plot stacked ratings
def plot_stacked_ratings(brand_names, brand_ratings_counts):
    ratings = range(1, 6)

    total_ratings = [sum(counts) for counts in brand_ratings_counts]
    brand_ratings_percentages = [[count / total * 100 for count in counts] for counts, total in zip(brand_ratings_counts, total_ratings)]

    plt.figure(figsize=(8, 6))
    bottom = [0] * len(brand_names)
    colors = ['red', 'green', 'blue', 'orange', 'purple']

    for i, brand_name in enumerate(brand_names):
        for rating, percentages, color in zip(ratings, brand_ratings_percentages[i], colors):
            plt.bar(i, percentages, bottom=bottom[i], color=color, label=f'Rating {rating}')
            bottom[i] += percentages

    plt.xlabel('Brand')
    plt.ylabel('Percentage')
    plt.title('Rating Distribution for Brands')

    legend_colors = [plt.bar(0, 0, color=color)[0] for color in colors]
    plt.legend(legend_colors, [f'Rating {rating}' for rating in ratings], title='Ratings', loc='upper right')
    plt.xticks(range(len(brand_names)), brand_names)
    plt.ylim(0, 100)
    plt.show()

brand_names = ["Brand 1", "Brand 2"]
brand_ratings_counts = [brand1_ratings_counts, brand2_ratings_counts]

plot_stacked_ratings(brand_names, brand_ratings_counts)


brand1_price = data.iloc[3]['product_price']
brand2_price = data.iloc[1046]['product_price']

brands = ['Brand 1', 'Brand 2']
prices = [brand1_price, brand2_price]

plt.bar(brands, prices, color=['blue', 'green'])
plt.xlabel('Brand')
plt.ylabel('Price')
plt.title('Price Comparison between Brand 1 and Brand 2')
for brand, price in zip(brands, prices):
    plt.text(brand, price, str(price), ha='center', va='bottom')
plt.show()
